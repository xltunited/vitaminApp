{"ast":null,"code":"var _jsxFileName = \"/Users/ju/Desktop/vitaminApp/src/App.js\";\n// DEPENDENCIES\nimport React, { Component } from 'react';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\"; // MY FILES\n\nimport Vitamins from './Components/MyPortfolio/MyPortfolio';\nimport Menu from './Components/Menu/Menu';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      vitaminCTotal: 0,\n      vitaminDTotal: 0,\n      vitaminETotal: 0,\n      userInputs: [],\n      userInputsD: [],\n      currentInput: \"\",\n      vitaminDInput: \"\"\n    };\n\n    this.getInputValue = event => {\n      const inputTotal = event.target.value;\n      this.setState({\n        currentInput: inputTotal\n      });\n    };\n\n    this.getInputValueD = event => {\n      const inputTotalD = event.target.value;\n      this.setState({\n        vitaminDInput: inputTotalD\n      });\n    };\n\n    this.submitBtn = () => {\n      // if user does not input anything, alert them\n      if (this.state.currentInput.length === 0) {\n        alert(\" ENTER SOMETHING, YOU FOOL! \");\n        return;\n      } // if user enters something that is not a number, alert them\n\n\n      if (!Number.isInteger(parseInt(this.state.currentInput))) {\n        alert(\"INVALID INPUT, YOU IMBECILE. NUMBERS ONLYS\");\n        return;\n      }\n\n      var newArray = this.state.userInputs;\n      var varTotal = 0;\n      newArray.push(parseInt(this.state.currentInput));\n      this.setState({\n        currentInput: \"\",\n        userInputs: newArray\n      });\n\n      for (let i = 0; i < newArray.length; i++) {\n        varTotal += parseInt(newArray[i]);\n      }\n\n      if (varTotal > 2000) {\n        alert(\"waNnA DiE?\");\n      }\n\n      this.setState({\n        vitaminCTotal: varTotal\n      });\n    };\n\n    this.vitaminDBtn = () => {\n      if (this.state.vitaminDInput.length === 0) {\n        alert(\" ENTER SOMETHING, YOU FOOL! \");\n        return;\n      }\n\n      if (!Number.isInteger(parseInt(this.state.vitaminDInput))) {\n        alert(\"INVALID INPUT, YOU IMBECILE. NUMBERS ONLYS\");\n        return;\n      }\n\n      var newArray = this.state.userInputsD;\n      var varTotal = 0;\n      newArray.push(parseInt(this.state.vitaminDInput));\n      this.setState({\n        currentInput: \"\",\n        userInputsD: newArray\n      });\n\n      for (let i = 0; i < newArray.length; i++) {\n        varTotal += parseInt(newArray[i]);\n      }\n\n      if (varTotal > 2000) {\n        alert(\"waNnA DiE?\");\n      }\n\n      this.setState({\n        vitaminDTotal: varTotal\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Menu, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(Vitamins, {\n      submitBtn: this.submitBtn,\n      submitBtnVitaminD: this.vitaminDBtn,\n      getInputValue: this.getInputValue,\n      getInputValueVitaminD: this.getInputValueD,\n      currentInput: this.state.currentInput,\n      vitaminDInput: this.state.getInputValueD,\n      vitaminC: this.state.vitaminCTotal,\n      vitaminD: this.state.vitaminDTotal,\n      vitaminE: this.state.vitaminETotal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ju/Desktop/vitaminApp/src/App.js"],"names":["React","Component","Vitamins","Menu","App","state","vitaminCTotal","vitaminDTotal","vitaminETotal","userInputs","userInputsD","currentInput","vitaminDInput","getInputValue","event","inputTotal","target","value","setState","getInputValueD","inputTotalD","submitBtn","length","alert","Number","isInteger","parseInt","newArray","varTotal","push","i","vitaminDBtn","render"],"mappings":"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","sourcesContent":["// DEPENDENCIES\nimport React, { Component } from 'react';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// MY FILES\nimport Vitamins from './Components/MyPortfolio/MyPortfolio';\nimport Menu from './Components/Menu/Menu';\n\nclass App extends Component {\n  state = {\n    vitaminCTotal : 0,\n    vitaminDTotal : 0,\n    vitaminETotal : 0,\n\n    userInputs:[],\n    userInputsD:[],\n    \n    currentInput:\"\",\n    vitaminDInput:\"\"\n  }\n\n  getInputValue = (event) => {\n    const inputTotal = event.target.value\n    this.setState({\n      currentInput: inputTotal,\n    })\n  }\n\n  getInputValueD = (event) => {\n  const inputTotalD = event.target.value\n  this.setState({\n    vitaminDInput: inputTotalD,\n  })\n}\n// VITAMIN C BUTTON =================================================\n  submitBtn = () => { \n  // if user does not input anything, alert them\n    if (this.state.currentInput.length === 0) {\n      alert(\" ENTER SOMETHING, YOU FOOL! \")\n      return;\n    }\n  // if user enters something that is not a number, alert them\n    if (!Number.isInteger(parseInt(this.state.currentInput))) {\n      alert(\"INVALID INPUT, YOU IMBECILE. NUMBERS ONLYS\")\n      return;\n    }\n\n  var newArray = this.state.userInputs;\n  var varTotal = 0;\n\n  newArray.push(parseInt(this.state.currentInput));\n  this.setState({\n    currentInput:\"\",\n    userInputs:newArray\n  });\n\n  for (let i = 0; i < newArray.length; i++) {\n    varTotal += parseInt(newArray[i]);      \n  }\n  if (varTotal > 2000) {\n    alert (\"waNnA DiE?\")\n  } \n  this.setState({\n    vitaminCTotal : varTotal\n  }) \n}\n//===============================================================\n// VITAMIN D =================================================\n  vitaminDBtn = () => { \n    if (this.state.vitaminDInput.length === 0) {\n      alert(\" ENTER SOMETHING, YOU FOOL! \")\n      return;\n    }\n    if (!Number.isInteger(parseInt(this.state.vitaminDInput))) {\n      alert(\"INVALID INPUT, YOU IMBECILE. NUMBERS ONLYS\")\n      return;\n    }\n\n  var newArray = this.state.userInputsD;\n  var varTotal = 0;\n\n  newArray.push(parseInt(this.state.vitaminDInput));\n  this.setState({\n    currentInput:\"\",\n    userInputsD : newArray\n  });\n\n  for (let i = 0; i < newArray.length; i++) {\n    varTotal += parseInt(newArray[i]);      \n  }\n  if (varTotal > 2000) {\n    alert (\"waNnA DiE?\")\n  } \n  this.setState({\n    vitaminDTotal : varTotal\n  }) \n}\n\n\nrender() {\n  return (\n    <div>\n    <Menu />\n    <br></br>\n    <Vitamins \n      submitBtn = {this.submitBtn}\n      submitBtnVitaminD = {this.vitaminDBtn}\n\n      getInputValue ={this.getInputValue}\n      getInputValueVitaminD ={this.getInputValueD}\n\n      currentInput = {this.state.currentInput}\n      vitaminDInput = {this.state.getInputValueD}\n\n      vitaminC = {this.state.vitaminCTotal}\n      vitaminD = {this.state.vitaminDTotal}\n      vitaminE = {this.state.vitaminETotal}\n\n    />\n    </div>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}